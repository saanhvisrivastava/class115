# -*- coding: utf-8 -*-
"""class115.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zDNHh2MmcRJD22cMNGSObqQgqE7b6CMr
"""

import csv
import numpy as np
import plotly.figure_factory as ff
import pandas as pd
import plotly.express as px

df=pd.read_csv('data115.csv')
temp_list=df['Temperature'].tolist()
melted_list=df['Melted'].tolist()

fig=px.scatter(x=temp_list,y=melted_list)
fig.show()

import csv
import numpy as np
import plotly.figure_factory as ff
import pandas as pd
import plotly.express as px






temp_array=np.array(temp_list)
melted_array=np.array(melted_list)
m,c=np.polyfit(temp_array,melted_array,1)
y=[]
for x in temp_array:
  y_value=m*x+c
  y.append(y_value)

fig.update_layout(shapes=[
  dict(
      type='line',
      y0=min(y),y1=max(y),
      x0=min(temp_list),x1=max(temp_list)
  )])

fig.show()

import csv
import numpy as np
import plotly.figure_factory as ff
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression

X=np.reshape(temp_list,(len(temp_list),1))
Y=np.reshape(melted_list,(len(melted_list),1))

lr=LogisticRegression()
lr.fit(X,Y)

plt.figure()
plt.scatter(X.ravel(),Y,color='k',zorder=10)

def model(x):
  return 1/(1+np.exp(-x))

X_test=np.linspace(0,5000,10000)
chances=model(X_test*lr.coef_+lr.intercept_).ravel()

plt.plot(X_test,chances,color='green',linewidth=2)
plt.axhline(y=0,color='b',linestyle='-')
plt.axhline(y=1,color='b',linestyle='-')
plt.axhline(y=0.5,color='r',linestyle='--')

plt.axvline(x=X_test[6843],color='pink',linestyle='--')

plt.ylabel('y')
plt.xlabel('x')
plt.xlim(3000,3450)

plt.show()

temp = float(input("Enter the temperature here:- "))
chances = model(temp * lr.coef_ + lr.intercept_).ravel()[0]
if chances <= 0.01: print("Tungsten will not be melted") 
elif chances >= 1: print("Tungsten will be melted") 
elif chances < 0.5: print("Tungsten might not get melted")
else: print("Tungsten might get melted")